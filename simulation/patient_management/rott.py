from typing import Optional

import numpy as np
import pandas as pd
from scipy.stats import truncnorm
from sqlalchemy.engine.base import Engine


class RemovalOtherThanTreatment:
    """
    A class for generating removals other than treatment (ROTT) for a waiting list simulation.

    This class can either use hardcoded mean and standard deviation values or can be provided with a SQL query
    to retrieve these values from a database.
    """

    def __init__(self, horizon: int, seed: Optional[int] = None):
        """
        Initialise the RemovalOtherThanTreatment class.

        Parameters:
        horizon (int): The number of days for which to generate ROTT values.
        seed (Optional[int]): A seed for random number generation to reproduce results.
        """
        self.horizon = horizon
        self.seed = seed
        self.mean = None
        self.std_dev = None

    # def setup_sql_distribution(self, sql_engine: Engine, query_string: str) -> None:
    #     """
    #     Set up the mean and standard deviation values using a SQL query.
    #
    #     This method executes a SQL query to pull a single-column table of daily removals other than treatment (ROTT)
    #     and calculates the mean and standard deviation of these values.
    #
    #     Parameters:
    #     sql_engine (SQLAlchemy Engine): A SQLAlchemy-compatible SQL engine.
    #     query_string (str): The SQL query string that retrieves the data.
    #
    #     Raises:
    #     ValueError: If the query returns more than one column.
    #     """
    #     dataframe = pd.read_sql(query_string, con=sql_engine)
    #
    #     # Dataframe should only have one column, raise error if this is not the case
    #     if dataframe.shape[1] > 1:
    #         raise ValueError("The DataFrame has more than one column.")
    #
    #     self.mean = dataframe[0].mean()
    #     self.std_dev = dataframe[0].std()

    def setup_distribution_from_data(self, dataframe: pd.DataFrame) -> None:
        """
        Set up the mean and standard deviation from a dataframe.

        This method calculates the mean and standard deviation of a dataframe provided to it.

        Parameters:
        dataframe (pd.DataFrame): A pandas dataframe that contains the rott data.

        Raises:
        ValueError: If the query returns more than one column.
        """
        # Dataframe should only have one column, raise error if this is not the case
        if dataframe.shape[1] > 1:
            raise ValueError("The DataFrame has more than one column.")

        self.mean = dataframe[0].mean()
        self.std_dev = dataframe[0].std()

    def setup_stochastic_distribution(self, mean: float, std_dev: float) -> None:
        """
        Set up the mean and standard deviation for generating ROTT stochastically.

        Parameters:
        mean (float): The mean daily removals other than treatment.
        std_dev (float): The standard deviation of daily removals other than treatment.
        """
        self.mean = mean
        self.std_dev = std_dev

    def __get_distribution(self) -> np.ndarray:
        """
        Generate a truncated normal distribution of ROTT values.

        This method generates a truncated normal distribution of daily removals other than treatment (ROTT)
        using the specified mean, standard deviation, and time horizon. If a seed was provided during initialization,
        the results will be reproducible.

        Returns:
        np.ndarray: An array of daily ROTT values for the specified horizon.
        """
        a, b = (0 - self.mean) / self.std_dev, (100000 - self.mean) / self.std_dev

        return truncnorm.rvs(
            a=a,
            b=b,
            loc=self.mean,
            scale=self.std_dev,
            size=self.horizon,
            random_state=self.seed,
        ).astype(int)

    def return_number_of_removals(self) -> np.ndarray:
        """
        Return the daily removals other than treatment (ROTT) for the simulation model.

        Returns:
        np.ndarray: An array of daily ROTT values generated by the model.
        """
        return self.__get_distribution()
