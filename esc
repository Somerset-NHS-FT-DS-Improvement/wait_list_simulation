[1mdiff --git a/simulation/patient_management/forecast_arrivals.py b/simulation/patient_management/forecast_arrivals.py[m
[1mindex cb52102..9db3104 100644[m
[1m--- a/simulation/patient_management/forecast_arrivals.py[m
[1m+++ b/simulation/patient_management/forecast_arrivals.py[m
[36m@@ -1,6 +1,6 @@[m
[31m-import pandas as pd[m
[31m-import numpy as np[m
 import holidays[m
[32m+[m[32mimport numpy as np[m
[32m+[m[32mimport pandas as pd[m
 from sktime.forecasting.statsforecast import StatsForecastAutoARIMA[m
 [m
 [m
[36m@@ -9,11 +9,11 @@[m [mclass Forecaster:[m
     def __init__(self, data_in, fh):[m
         """[m
         Forecasting class for referrals.[m
[31m-        [m
[32m+[m
         Args:[m
             data_in (pd.DataFrame): Assuming the data will be daily with columns dst and refs.[m
             fh (int): Output forecast horizon (in days).[m
[31m-        [m
[32m+[m
         """[m
 [m
         self.data_in = data_in[m
[36m@@ -24,8 +24,8 @@[m [mclass Forecaster:[m
         Structures data in required format for sk-time framework.[m
         """[m
 [m
[31m-        input_data = self.data_in.set_index('dst').asfreq('d').fillna(0)[m
[31m-        self.data = input_data[['refs']].rename(columns={'refs': 'y'})['y'][m
[32m+[m[32m        input_data = self.data_in.set_index("dst").asfreq("d").fillna(0)[m
[32m+[m[32m        self.data = input_data[["refs"]].rename(columns={"refs": "y"})["y"][m
 [m
     def _create_holiday_dataframe(self):[m
         """[m
[36m@@ -33,42 +33,51 @@[m [mclass Forecaster:[m
         To use as external regressors.[m
         """[m
 [m
[31m-        date_range = pd.date_range(start=self.data.index.min(),[m
[31m-                                   periods=len(self.data) + self.fh,[m
[31m-                                   freq='D')[m
[32m+[m[32m        date_range = pd.date_range([m
[32m+[m[32m            start=self.data.index.min(), periods=len(self.data) + self.fh, freq="D"[m
[32m+[m[32m        )[m
 [m
         # Create a dict-like object for England's public holidays[m
[31m-        uk_holidays = holidays.UK(state='England', years=range(date_range.min().year,[m
[31m-                                                               date_range.max().year + 1))[m
[31m-[m
[31m-        holiday_vals = ["New Year's Day", 'Christmas Day', 'Good Friday', 'Easter Monday',[m
[31m-                        'May Day', 'Spring Bank Holiday', 'Late Summer Bank Holiday',[m
[31m-                        'Boxing Day'][m
[31m-[m
[31m-        uk_holidays = pd.DataFrame(uk_holidays.items(), columns=['ds', 'holiday'])[m
[32m+[m[32m        uk_holidays = holidays.UK([m
[32m+[m[32m            state="England",[m
[32m+[m[32m            years=range(date_range.min().year, date_range.max().year + 1),[m
[32m+[m[32m        )[m
[32m+[m
[32m+[m[32m        holiday_vals = [[m
[32m+[m[32m            "New Year's Day",[m
[32m+[m[32m            "Christmas Day",[m
[32m+[m[32m            "Good Friday",[m
[32m+[m[32m            "Easter Monday",[m
[32m+[m[32m            "May Day",[m
[32m+[m[32m            "Spring Bank Holiday",[m
[32m+[m[32m            "Late Summer Bank Holiday",[m
[32m+[m[32m            "Boxing Day",[m
[32m+[m[32m        ][m
[32m+[m
[32m+[m[32m        uk_holidays = pd.DataFrame(uk_holidays.items(), columns=["ds", "holiday"])[m
 [m
         holiday_df = uk_holidays[pd.to_datetime(uk_holidays.ds).isin(date_range)][m
         holiday_df = holiday_df[holiday_df.holiday.isin(holiday_vals)][m
 [m
         exog_holiday_df = pd.DataFrame()[m
[31m-        exog_holiday_df['ds'] = date_range[m
[32m+[m[32m        exog_holiday_df["ds"] = date_range[m
 [m
[31m-        exog_holiday_df['ds'] = pd.to_datetime(exog_holiday_df['ds'])[m
[31m-        holiday_df['ds'] = pd.to_datetime(holiday_df['ds'])[m
[32m+[m[32m        exog_holiday_df["ds"] = pd.to_datetime(exog_holiday_df["ds"])[m
[32m+[m[32m        holiday_df["ds"] = pd.to_datetime(holiday_df["ds"])[m
 [m
         for x in holiday_df.holiday.unique():[m
[31m-            exog_holiday_df[x] = exog_holiday_df.ds.isin([m
[31m-                holiday_df[holiday_df.holiday == x].ds) * 1[m
[32m+[m[32m            exog_holiday_df[x] = ([m
[32m+[m[32m                exog_holiday_df.ds.isin(holiday_df[holiday_df.holiday == x].ds) * 1[m
[32m+[m[32m            )[m
 [m
[31m-        holidays_data = exog_holiday_df.set_index('ds', drop=True).sort_index()[m
[31m-        holidays_data.index.name = 'dst'[m
[31m-        self.holidays = holidays_data.astype('float')[m
[32m+[m[32m        holidays_data = exog_holiday_df.set_index("ds", drop=True).sort_index()[m
[32m+[m[32m        holidays_data.index.name = "dst"[m
[32m+[m[32m        self.holidays = holidays_data.astype("float")[m
 [m
[31m-    def forecast(self,[m
[31m-                 model=StatsForecastAutoARIMA(sp=7)):[m
[32m+[m[32m    def forecast(self, model=StatsForecastAutoARIMA(sp=7)):[m
         """[m
[31m-        Create forecast output. [m
[31m-        [m
[32m+[m[32m        Create forecast output.[m
[32m+[m
         !! ToDo: Use approach specific to count data (GLM?)[m
         Args:[m
             - model (from sk-time)[m
[36m@@ -79,22 +88,23 @@[m [mclass Forecaster:[m
         self.model = model[m
         self.model.fit(y=self.data, X=self.holidays.loc[self.data.index])[m
 [m
[31m-        fcst_range = pd.date_range(start=self.data.index.min(),[m
[31m-                                   periods=len(self.data) + self.fh,[m
[31m-                                   freq='D')[m
[32m+[m[32m        fcst_range = pd.date_range([m
[32m+[m[32m            start=self.data.index.min(), periods=len(self.data) + self.fh, freq="D"[m
[32m+[m[32m        )[m
 [m
[31m-        # Output forecast.  [m
[31m-        forecast = self.model.predict(fh=np.arange(1, 1 + self.fh),[m
[31m-                                      X=self.holidays.loc[fcst_range])[m
[32m+[m[32m        # Output forecast.[m
[32m+[m[32m        forecast = self.model.predict([m
[32m+[m[32m            fh=np.arange(1, 1 + self.fh), X=self.holidays.loc[fcst_range][m
[32m+[m[32m        )[m
 [m
[31m-        output = forecast.to_frame(name='yhat')[m
[32m+[m[32m        output = forecast.to_frame(name="yhat")[m
 [m
         self.forecast = output[m
 [m
     def apply_growth(self, annual_growth_rate=0):[m
         """[m
         Applies linear % annual growth to output forecast.[m
[31m-        [m
[32m+[m
         Args:[m
             annual_growth_rate (int, 0-1): Annual growth %.[m
         Returns:[m
[36m@@ -105,12 +115,18 @@[m [mclass Forecaster:[m
 [m
         forecasts_df = self.forecast[m
 [m
[31m-        daily_growth_factor = [((self.annual_growth_rate / 365) * i) for i in range(1, len(forecasts_df) + 1)][m
[32m+[m[32m        daily_growth_factor = [[m
[32m+[m[32m            ((self.annual_growth_rate / 365) * i)[m
[32m+[m[32m            for i in range(1, len(forecasts_df) + 1)[m
[32m+[m[32m        ][m
 [m
         forecast_sums = forecasts_df.sum()[m
 [m
         growth_amounts = forecast_sums * self.annual_growth_rate[m
[31m-        growth = [growth_amounts.values[x] * np.array(daily_growth_factor) for x in range(0, len(forecast_sums.index))][m
[32m+[m[32m        growth = [[m
[32m+[m[32m            growth_amounts.values[x] * np.array(daily_growth_factor)[m
[32m+[m[32m            for x in range(0, len(forecast_sums.index))[m
[32m+[m[32m        ][m
 [m
         growth_addition = pd.DataFrame(growth).T[m
 [m
[36m@@ -122,7 +138,7 @@[m [mclass Forecaster:[m
     def convert_to_count(self, continuous_data):[m
         """[m
         Convert to count data.[m
[31m-        [m
[32m+[m
         !! ToDo: Need to think of better approach.[m
         Args:[m
             continuous_data (Pandas.DataFrame/Series/list/array): Continuous data to convert to count.[m
